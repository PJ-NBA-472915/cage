{
  "info": {
    "name": "Cage Pod API - Complete Collection v3",
    "description": "Comprehensive Postman collection for the Cage Pod-based Multi-Agent Repository Service API. This collection includes all endpoints for task management, crew operations, individual agent testing, file editing, git operations, RAG services, and additional utility endpoints. Features automatic task_id and run_id variable setting.",
    "version": "3.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8000",
      "type": "string",
      "description": "Base URL for the Cage API service"
    },
    {
      "key": "pod_token",
      "value": "EQmjYQJJRRF4TQo3QgXn8CyQMAYrEhbz",
      "type": "string",
      "description": "POD_TOKEN for API authentication"
    },
    {
      "key": "task_id",
      "value": "2025-09-17-example-task",
      "type": "string",
      "description": "Example task ID for testing"
    },
    {
      "key": "run_id",
      "value": "example-run-456",
      "type": "string",
      "description": "Example crew run ID for testing"
    },
    {
      "key": "branch_name",
      "value": "feature/example",
      "type": "string",
      "description": "Example branch name for testing"
    },
    {
      "key": "file_path",
      "value": "src/example.py",
      "type": "string",
      "description": "Example file path for testing"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{pod_token}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health & Status",
      "description": "Health check and service information endpoints",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Check service health and repository status. Returns current date, repository path, branch information, and last index time."
          },
          "response": []
        },
        {
          "name": "About",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/about",
              "host": ["{{base_url}}"],
              "path": ["about"]
            },
            "description": "Get pod information including ID, version, capabilities, and repository details."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Task Management",
      "description": "Task creation, updates, and management endpoints",
      "item": [
        {
          "name": "Create Task (Full Data)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Auto-set task_id from response",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.task_id) {",
                  "        pm.collectionVariables.set('task_id', response.task_id);",
                  "        console.log('Set task_id to:', response.task_id);",
                  "    }",
                  "    // Also check if task_id is in the task object",
                  "    if (response.task && response.task.id) {",
                  "        pm.collectionVariables.set('task_id', response.task.id);",
                  "        console.log('Set task_id from task object to:', response.task.id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"{{task_id}}\",\n  \"title\": \"Example Task Title\",\n  \"owner\": \"Developer\",\n  \"status\": \"planned\",\n  \"progress_percent\": 0,\n  \"tags\": [\"example\", \"test\"],\n  \"summary\": \"This is an example task created via the API\",\n  \"success_criteria\": [\n    {\n      \"text\": \"Task is created successfully\",\n      \"checked\": false\n    }\n  ],\n  \"acceptance_checks\": [\n    {\n      \"text\": \"All requirements are met\",\n      \"checked\": false\n    }\n  ],\n  \"subtasks\": [\n    \"Create the task\",\n    \"Verify creation\"\n  ],\n  \"decisions\": [\n    \"Use API for task creation\"\n  ],\n  \"next_steps\": [\n    \"Test the endpoint\"\n  ],\n  \"references\": [\n    \"API documentation\"\n  ],\n  \"metadata\": {\n    \"project_type\": \"example\",\n    \"complexity\": \"simple\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/tasks/create",
              "host": ["{{base_url}}"],
              "path": ["tasks", "create"]
            },
            "description": "Create a new task with complete data from request body. This endpoint allows you to create a task with all fields populated instead of creating a file first."
          },
          "response": []
        },
        {
          "name": "Confirm Task (Simple)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Auto-set task_id from response",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.task_id) {",
                  "        pm.collectionVariables.set('task_id', response.task_id);",
                  "        console.log('Set task_id to:', response.task_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": \"{{task_id}}\",\n  \"status\": \"confirmed\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/tasks/confirm",
              "host": ["{{base_url}}"],
              "path": ["tasks", "confirm"]
            },
            "description": "Create or update a task file. If task exists, updates status; if not, creates new task with basic structure."
          },
          "response": []
        },
        {
          "name": "Update Task (Basic)",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"in-progress\",\n  \"progress_percent\": 50,\n  \"logs\": [\"Updated task status\", \"Made progress\"]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/tasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["tasks", "{{task_id}}"]
            },
            "description": "Update specific task fields. Supports updating status, progress_percent, and logs."
          },
          "response": []
        },
        {
          "name": "Update Task (Comprehensive)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": \"{{task_id}}\",\n  \"status\": \"in-progress\",\n  \"progress_percent\": 75,\n  \"changelog\": [\n    {\n      \"timestamp\": \"2025-09-17 10:00\",\n      \"text\": \"Updated task with comprehensive data\"\n    }\n  ],\n  \"lessons_learned\": [\n    \"API endpoint works well\",\n    \"Comprehensive updates are useful\"\n  ],\n  \"issues_risks\": [\n    \"None identified\"\n  ],\n  \"next_steps\": [\n    \"Continue development\",\n    \"Test final implementation\"\n  ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/tasks/update",
              "host": ["{{base_url}}"],
              "path": ["tasks", "update"]
            },
            "description": "Update task with comprehensive fields including changelog, lessons learned, issues/risks, and next steps."
          },
          "response": []
        },
        {
          "name": "Get Task",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks/{{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["tasks", "{{task_id}}"]
            },
            "description": "Retrieve full task JSON data including all fields and metadata."
          },
          "response": []
        },
        {
          "name": "List All Tasks",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tasks",
              "host": ["{{base_url}}"],
              "path": ["tasks"]
            },
            "description": "List all tasks in the system with their basic information."
          },
          "response": []
        },
        {
          "name": "Rebuild Tracker",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/tracker/rebuild",
              "host": ["{{base_url}}"],
              "path": ["tracker", "rebuild"]
            },
            "description": "Rebuild the task tracker by scanning all task files and creating/updating the _status.json file."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Crew Operations",
      "description": "CrewAI integration endpoints for task planning and execution",
      "item": [
        {
          "name": "Create Plan",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Auto-set task_id and run_id from response",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.task_id) {",
                  "        pm.collectionVariables.set('task_id', response.task_id);",
                  "        console.log('Set task_id to:', response.task_id);",
                  "    }",
                  "    if (response.run_id) {",
                  "        pm.collectionVariables.set('run_id', response.run_id);",
                  "        console.log('Set run_id to:', response.run_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": \"{{task_id}}\",\n  \"plan\": {\n    \"title\": \"Example Plan\",\n    \"assumptions\": [\"API is working\", \"Database is available\"],\n    \"steps\": [\n      {\n        \"step\": 1,\n        \"action\": \"Create API endpoint\",\n        \"description\": \"Implement the new endpoint\"\n      },\n      {\n        \"step\": 2,\n        \"action\": \"Test endpoint\",\n        \"description\": \"Verify functionality\"\n      }\n    ],\n    \"commit_message\": \"Add new API endpoint\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/crew/plan",
              "host": ["{{base_url}}"],
              "path": ["crew", "plan"]
            },
            "description": "Write or merge a task plan into the task file. The plan includes assumptions, steps, and commit message."
          },
          "response": []
        },
        {
          "name": "Apply Plan",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Auto-set task_id and run_id from response",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.task_id) {",
                  "        pm.collectionVariables.set('task_id', response.task_id);",
                  "        console.log('Set task_id to:', response.task_id);",
                  "    }",
                  "    if (response.run_id) {",
                  "        pm.collectionVariables.set('run_id', response.run_id);",
                  "        console.log('Set run_id to:', response.run_id);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task_id\": \"{{task_id}}\",\n  \"run_id\": \"{{run_id}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/crew/apply",
              "host": ["{{base_url}}"],
              "path": ["crew", "apply"]
            },
            "description": "Apply crew changes through the Editor Tool. This executes the planned changes and updates the task file."
          },
          "response": []
        },
        {
          "name": "Get Crew Run Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/crew/runs/{{run_id}}",
              "host": ["{{base_url}}"],
              "path": ["crew", "runs", "{{run_id}}"]
            },
            "description": "Get crew run status, logs, and summary information."
          },
          "response": []
        },
        {
          "name": "Upload Artefacts",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"files\": {\n    \"report.md\": \"# Test Report\\n\\nThis is a test report.\",\n    \"output.txt\": \"Test output content\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/crew/runs/{{run_id}}/artefacts",
              "host": ["{{base_url}}"],
              "path": ["crew", "runs", "{{run_id}}", "artefacts"]
            },
            "description": "Upload files into .cage/runs/<run_id>/* directory for crew run artefacts."
          },
          "response": []
        },
        {
          "name": "Test Individual Agent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"agent\": \"implementer\",\n  \"request\": \"Please add a readme file\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/crew/request",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "crew",
                "request"
              ]
            },
            "description": "Test an individual agent with a specific request. Supports planner, implementer, reviewer, and committer agents."
          },
          "response": []
        },
        {
          "name": "Test Planner Agent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"agent\": \"planner\",\n  \"request\": \"Create a detailed plan for building a note-taking web application\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/crew/request",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "crew",
                "request"
              ]
            },
            "description": "Test the planner agent with a planning request."
          },
          "response": []
        },
        {
          "name": "Test Implementer Agent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"agent\": \"implementer\",\n  \"request\": \"Create an HTML file for a note-taking app with modern styling\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/crew/request",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "crew",
                "request"
              ]
            },
            "description": "Test the implementer agent with a file creation request."
          },
          "response": []
        },
        {
          "name": "Test Reviewer Agent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"agent\": \"reviewer\",\n  \"request\": \"Review the HTML structure for accessibility and best practices\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/crew/request",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "crew",
                "request"
              ]
            },
            "description": "Test the reviewer agent with a code review request."
          },
          "response": []
        },
        {
          "name": "Test Committer Agent",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"agent\": \"committer\",\n  \"request\": \"Commit the note-taking app files with a descriptive message\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/crew/request",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "crew",
                "request"
              ]
            },
            "description": "Test the committer agent with a Git commit request."
          },
          "response": []
        },
        {
          "name": "List Available Agents",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/crew/agents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "crew",
                "agents"
              ]
            },
            "description": "List all available agents and their information."
          },
          "response": []
        },
        {
          "name": "Get Agent Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/crew/agents/implementer",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "crew",
                "agents",
                "implementer"
              ]
            },
            "description": "Get detailed information about a specific agent."
          },
          "response": []
        }
      ]
    },
    {
      "name": "File Operations",
      "description": "File editing and management through the Editor Tool",
      "item": [
        {
          "name": "Edit File",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"operation\": \"INSERT\",\n  \"path\": \"{{file_path}}\",\n  \"selector\": {\n    \"line\": 1,\n    \"column\": 0\n  },\n  \"payload\": {\n    \"content\": \"# Example File\\n\\nThis is an example file created via API.\\n\"\n  },\n  \"intent\": \"Create example file for testing\",\n  \"dry_run\": false,\n  \"author\": \"API User\",\n  \"correlation_id\": \"test-123\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/files/edit",
              "host": ["{{base_url}}"],
              "path": ["files", "edit"]
            },
            "description": "Structured file operations with locking. Supports INSERT, UPDATE, DELETE operations with proper conflict resolution."
          },
          "response": []
        },
        {
          "name": "Commit File Changes",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Add example file\",\n  \"files\": [\"{{file_path}}\"],\n  \"author\": \"API User\",\n  \"email\": \"api@example.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/files/commit",
              "host": ["{{base_url}}"],
              "path": ["files", "commit"]
            },
            "description": "Commit file changes with a message. This stages and commits the specified files."
          },
          "response": []
        },
        {
          "name": "Get File SHA",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/files/sha?path={{file_path}}",
              "host": ["{{base_url}}"],
              "path": ["files", "sha"],
              "query": [
                {
                  "key": "path",
                  "value": "{{file_path}}"
                }
              ]
            },
            "description": "Get SHA hash of a file for validation purposes."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Git Operations",
      "description": "Git repository management and version control operations",
      "item": [
        {
          "name": "Get Git Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/git/status",
              "host": ["{{base_url}}"],
              "path": ["git", "status"]
            },
            "description": "Get Git repository status including current branch, working directory status, and staged changes."
          },
          "response": []
        },
        {
          "name": "List Branches",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/git/branch",
              "host": ["{{base_url}}"],
              "path": ["git", "branch"]
            },
            "description": "Get list of all Git branches (local and remote)."
          },
          "response": []
        },
        {
          "name": "Create Branch",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"{{branch_name}}\",\n  \"from\": \"main\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/git/branch",
              "host": ["{{base_url}}"],
              "path": ["git", "branch"]
            },
            "description": "Create a new Git branch from the specified source branch."
          },
          "response": []
        },
        {
          "name": "Create Commit",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Add new feature\",\n  \"files\": [\"{{file_path}}\"],\n  \"author\": \"API User\",\n  \"email\": \"api@example.com\",\n  \"sign\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/git/commit?task_id={{task_id}}",
              "host": ["{{base_url}}"],
              "path": ["git", "commit"],
              "query": [
                {
                  "key": "task_id",
                  "value": "{{task_id}}"
                }
              ]
            },
            "description": "Create a Git commit with the specified message and files. Optionally link to a task ID."
          },
          "response": []
        },
        {
          "name": "Push Changes",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"branch\": \"{{branch_name}}\",\n  \"remote\": \"origin\",\n  \"force\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/git/push",
              "host": ["{{base_url}}"],
              "path": ["git", "push"]
            },
            "description": "Push changes to remote repository. Supports force push option."
          },
          "response": []
        },
        {
          "name": "Pull Changes",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"branch\": \"main\",\n  \"remote\": \"origin\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/git/pull",
              "host": ["{{base_url}}"],
              "path": ["git", "pull"]
            },
            "description": "Pull changes from remote repository."
          },
          "response": []
        },
        {
          "name": "Merge Branches",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"source_branch\": \"{{branch_name}}\",\n  \"target_branch\": \"main\",\n  \"message\": \"Merge feature branch\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/git/merge",
              "host": ["{{base_url}}"],
              "path": ["git", "merge"]
            },
            "description": "Merge a source branch into target branch."
          },
          "response": []
        },
        {
          "name": "Get Commit History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/git/history?limit=10",
              "host": ["{{base_url}}"],
              "path": ["git", "history"],
              "query": [
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get Git commit history with optional limit on number of commits."
          },
          "response": []
        },
        {
          "name": "Revert Commits",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"branch\": \"{{branch_name}}\",\n  \"to\": \"HEAD~1\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/git/revert",
              "host": ["{{base_url}}"],
              "path": ["git", "revert"]
            },
            "description": "Revert commits on a branch for rollback purposes."
          },
          "response": []
        },
        {
          "name": "Open Pull Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"from_branch\": \"{{branch_name}}\",\n  \"to\": \"main\",\n  \"title\": \"Add new feature\",\n  \"body\": \"This PR adds a new feature to the application.\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/git/open_pr",
              "host": ["{{base_url}}"],
              "path": ["git", "open_pr"]
            },
            "description": "Open a pull request (placeholder implementation)."
          },
          "response": []
        }
      ]
    },
    {
      "name": "RAG Service",
      "description": "Retrieval-Augmented Generation service endpoints for code search and indexing",
      "item": [
        {
          "name": "Query RAG System",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"query\": \"How to create a new API endpoint?\",\n  \"top_k\": 10,\n  \"filters\": {\n    \"language\": \"python\",\n    \"path_pattern\": \"*.py\"\n  }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/rag/query",
              "host": ["{{base_url}}"],
              "path": ["rag", "query"]
            },
            "description": "Query the RAG system for relevant code snippets and documentation. Supports filtering by language, path patterns, and other metadata."
          },
          "response": []
        },
        {
          "name": "Reindex RAG System",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"paths\": [\"src/\", \"docs/\"],\n  \"force\": false\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/rag/reindex",
              "host": ["{{base_url}}"],
              "path": ["rag", "reindex"]
            },
            "description": "Reindex the RAG system with specified paths. Use force=true to reindex even if already indexed."
          },
          "response": []
        },
        {
          "name": "Check Blob Metadata",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/rag/blobs/abc123def456",
              "host": ["{{base_url}}"],
              "path": ["rag", "blobs", "abc123def456"]
            },
            "description": "Check if blob metadata is present in the RAG system for a specific SHA."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Utility Endpoints",
      "description": "Utility and helper endpoints for various operations",
      "item": [
        {
          "name": "Get Diff",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/diff?branch={{branch_name}}",
              "host": ["{{base_url}}"],
              "path": ["diff"],
              "query": [
                {
                  "key": "branch",
                  "value": "{{branch_name}}"
                }
              ]
            },
            "description": "Get diff for a specific branch or current changes."
          },
          "response": []
        },
        {
          "name": "Execute Command",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"workdir\": \"/work/repo\",\n  \"cmd\": [\"ls\", \"-la\"],\n  \"timeout_sec\": 30\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/runner/exec",
              "host": ["{{base_url}}"],
              "path": ["runner", "exec"]
            },
            "description": "Execute a command in a working directory with optional timeout."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Webhooks",
      "description": "Webhook registration and management (placeholder implementation)",
      "item": [
        {
          "name": "Register Webhook",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{base_url}}/webhooks",
              "host": ["{{base_url}}"],
              "path": ["webhooks"]
            },
            "description": "Register a webhook (placeholder implementation)."
          },
          "response": []
        }
      ]
    }
  ]
}
