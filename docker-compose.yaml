services:
  traefik:
    image: traefik:v3.1
    command:
      - --api.insecure=true
      - --entrypoints.web.address=:80
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
    ports:
      - "80:80"      # web
      - "8080:8080"  # dashboard (insecure, local only)
    volumes:
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/dynamic:/etc/traefik/dynamic:ro
    networks:
      - proxy
      - internal

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - redis_data:/data
    networks:
      - internal

  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-agentnet}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - internal

  manager:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - redis
      - postgres
    env_file:
      - .env/.env.manager
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      DATABASE_URL: ${DATABASE_URL:-postgresql://$${POSTGRES_USER:-postgres}:$${POSTGRES_PASSWORD:-postgres}@postgres:$${POSTGRES_PORT:-5432}/$${POSTGRES_DB:-agentnet}}
    volumes:
      - .:/app
    working_dir: /app/memory-bank
    entrypoint: ["/bin/sh", "-c"]
    command: ["python3 -m http.server 8081"]
    networks:
      - proxy
      - internal

  agent:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - REPOSITORY=${REPOSITORY}
    env_file:
      - .env/.env.agent
    environment:
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      CURSOR_API_KEY: ${CURSOR_API_KEY:-}
      ORIGIN_BRANCH: ${ORIGIN_BRANCH:-main}
      CURRENT_BRANCH: ${CURRENT_BRANCH:-agent-work}
    volumes:
      - .:/origin
    working_dir: /app
    # Run the agent daemon with just the CLI request
    command: ["python3", "/app/agent_daemon.py", "write a poem about trees in poem.txt"]
    depends_on:
      - redis
    networks:
      - internal
    # Scale with: `podman compose up -d --scale agent=2`

networks:
  proxy:
    driver: bridge
  internal:
    driver: bridge

volumes:
  redis_data:
  pg_data:
