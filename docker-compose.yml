services:
  # PostgreSQL database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: cage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "${DB_PORT:-6432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Files API service
  files-api:
    build:
      context: .
      dockerfile: dockerfiles/files-api/Dockerfile
    command: ["uv", "run", "uvicorn", "src.apps.files_api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8010:8000"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - REPO_PATH=/work/repo
      - RELOAD=${RELOAD:-false}
    volumes:
      # Mount only the source code, not the entire project directory
      - ./src:/app/src
      - ./tests:/app/tests
      - ./pyproject.toml:/app/pyproject.toml:ro
      # Mount the repository with restricted access
      - ${REPO_PATH}:/work/repo
      # Mount logs directory for the service to write logs
      - ./logs/api/files:/app/logs
    user: filesapi:filesapi
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    profiles:
      - dev
      - prod

  # Git API service
  git-api:
    build:
      context: .
      dockerfile: dockerfiles/git-api/Dockerfile
    command: ["uv", "run", "uvicorn", "src.apps.git_api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8011:8000"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - REPO_PATH=/work/repo
      - RELOAD=${RELOAD:-false}
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ${REPO_PATH}:/work/repo
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    profiles:
      - dev
      - prod

  # RAG API service
  rag-api:
    build:
      context: .
      dockerfile: dockerfiles/rag-api/Dockerfile
    command: ["uv", "run", "uvicorn", "src.apps.rag_api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8012:8000"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/cage
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RELOAD=${RELOAD:-false}
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ${REPO_PATH}:/work/repo
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    profiles:
      - dev
      - prod

  # Lock API service (Golang development)
  lock-api:
    build:
      context: .
      dockerfile: dockerfiles/lock-api/Dockerfile
    command: ["uv", "run", "uvicorn", "src.apps.lock_api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8013:8000"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - REPO_PATH=/work/repo
      - RELOAD=${RELOAD:-false}
      - GOPATH=/go
      - GOROOT=/usr/local/go
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ${REPO_PATH}:/work/repo
      - go_cache:/go
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    profiles:
      - dev
      - prod

  # MCP Server (Streamable HTTP)
  mcp:
    build:
      context: .
      dockerfile: dockerfiles/mcp/Dockerfile
    command: ["/app/scripts/start-mcp.sh"]
    ports:
      - "${MCP_PORT:-8765}:8765"
      - "5679:5679"  # debugpy debug port
    environment:
      - POD_TOKEN=${POD_TOKEN:-test-mcp-token}
      - API_BASE_URL=http://crew-api:8000
      - API_TIMEOUT_S=30
      - DEBUGPY_ENABLED=${DEBUGPY_ENABLED:-0}
      - DEBUGPY_WAIT_FOR_CLIENT=${DEBUGPY_WAIT_FOR_CLIENT:-0}
    volumes:
      - .:/app
      - ${REPO_PATH}:/work/repo
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      crew-api:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "sh", "-c", "curl -X POST http://localhost:8765/mcp -H 'Content-Type: application/json' -H 'Accept: application/json, text/event-stream' -d '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/list\"}' --max-time 10 --write-out '%{http_code}' --output /dev/null --silent | grep -q '400'"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 15s
    profiles:
      - dev
      - prod

  # Crew API service
  crew-api:
    build:
      context: .
      dockerfile: dockerfiles/crew-api/Dockerfile
    command: ["uv", "run", "uvicorn", "src.apps.crew_api.main:app", "--host", "0.0.0.0", "--port", "8000"]
    ports:
      - "8014:8000"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - REPO_PATH=/work/repo
      - RELOAD=${RELOAD:-false}
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ${REPO_PATH}:/work/repo
      - ./logs/api/crew:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    profiles:
      - dev
      - prod

  # Logging Stack - Loki (Log Aggregation)
  loki:
    image: grafana/loki:2.9.6
    command: ["-config.file=/etc/loki/config.yml"]
    volumes:
      - ./logging-stack/loki/config.yml:/etc/loki/config.yml:ro
      - loki-data:/loki
    ports:
      - '3100:3100'
    healthcheck:
      test: ['CMD', 'wget', '-qO-', 'http://localhost:3100/ready']
      interval: 15s
      timeout: 3s
      retries: 20
    restart: unless-stopped
    profiles: [observability]

  # Logging Stack - Promtail (Log Collection)
  promtail:
    image: grafana/promtail:2.9.6
    volumes:
      - ./logging-stack/promtail/config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/cage:ro
      - promtail-positions:/tmp
    command: ["-config.file=/etc/promtail/config.yml"]
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    profiles: [observability]

  # Logging Stack - Grafana (Log Visualization)
  grafana:
    image: grafana/grafana:11.1.3
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    profiles: [observability]

  # Logging Stack - Logrotate (Log Rotation)
  logrotate:
    build:
      context: ./logging-stack/logrotate
      dockerfile: Dockerfile
    volumes:
      - ./logs:/var/log/cage
      - logrotate-status:/var/lib/logrotate
    restart: unless-stopped
    profiles: [observability]

volumes:
  postgres_data:
  redis_data:
  go_cache:
  # Logging stack volumes
  loki-data:
  promtail-positions:
  grafana-data:
  logrotate-status:
