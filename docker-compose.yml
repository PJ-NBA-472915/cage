networks:
  cage-internal:
    driver: bridge
    internal: false  # Set to true for complete isolation, but keep false for development
  cage-external:
    driver: bridge

services:
  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@localhost}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --log.level=INFO
      - --accesslog=true
    networks:
      - cage-internal
      - cage-external
    ports:
      - "8081:80"
      - "8443:443"
      - "8082:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.dashboard.entrypoints=web"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
    restart: unless-stopped
    profiles:
      - dev
      - prod

  # PostgreSQL database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: cage
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    networks:
      - cage-internal
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    networks:
      - cage-internal
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Ollama service for local embeddings
  ollama:
    image: ollama/ollama:latest
    container_name: cage-ollama
    restart: unless-stopped
    networks:
      - cage-internal
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    volumes:
      - ollama_models:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:11434/api/tags"]
      interval: 15s
      timeout: 3s
      retries: 20
      start_period: 30s
    profiles:
      - dev
      - prod

  # Files API service (internal only)
  files-api:
    build:
      context: .
      target: files-api
    networks:
      - cage-internal
      - cage-external
    labels:
      - "traefik.enable=true"
      # HTTP routing
      - "traefik.http.routers.files-api.rule=Host(`files.localhost`)"
      - "traefik.http.routers.files-api.entrypoints=web"
      - "traefik.http.services.files-api.loadbalancer.server.port=8000"
      # HTTPS routing with Let's Encrypt
      - "traefik.http.routers.files-api-secure.rule=Host(`files.localhost`)"
      - "traefik.http.routers.files-api-secure.entrypoints=websecure"
      - "traefik.http.routers.files-api-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.files-api-secure.service=files-api"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - REPO_PATH=/work/repo
      - RELOAD=${RELOAD:-false}
    volumes:
      # Mount only the source code, not the entire project directory
      - ./src:/app/src
      - ./tests:/app/tests
      - ./pyproject.toml:/app/pyproject.toml:ro
      # Mount the repository with restricted access
      - ${REPO_PATH}:/work/repo
      # Mount logs directory for the service to write logs
      - ./logs/files-api:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    #   start_period: 5s
    profiles:
      - dev
      - prod

  # Git API service (internal only)
  git-api:
    build:
      context: .
      target: git-api
    networks:
      - cage-internal
      - cage-external
    labels:
      - "traefik.enable=true"
      # HTTP routing
      - "traefik.http.routers.git-api.rule=Host(`git.localhost`)"
      - "traefik.http.routers.git-api.entrypoints=web"
      - "traefik.http.services.git-api.loadbalancer.server.port=8000"
      # HTTPS routing with Let's Encrypt
      - "traefik.http.routers.git-api-secure.rule=Host(`git.localhost`)"
      - "traefik.http.routers.git-api-secure.entrypoints=websecure"
      - "traefik.http.routers.git-api-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.git-api-secure.service=git-api"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - REPO_PATH=/work/repo
      - RELOAD=${RELOAD:-false}
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ${REPO_PATH}:/work/repo
      # Mount logs directory for the service to write logs
      - ./logs/git-api:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    #   start_period: 5s
    profiles:
      - dev
      - prod

  # RAG API service (internal only)
  rag-api:
    build:
      context: .
      target: rag-api
    networks:
      - cage-internal
      - cage-external
    labels:
      - "traefik.enable=true"
      # HTTP routing
      - "traefik.http.routers.rag-api.rule=Host(`rag.localhost`)"
      - "traefik.http.routers.rag-api.entrypoints=web"
      - "traefik.http.services.rag-api.loadbalancer.server.port=8000"
      # HTTPS routing with Let's Encrypt
      - "traefik.http.routers.rag-api-secure.rule=Host(`rag.localhost`)"
      - "traefik.http.routers.rag-api-secure.entrypoints=websecure"
      - "traefik.http.routers.rag-api-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.rag-api-secure.service=rag-api"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/cage
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RELOAD=${RELOAD:-false}
      # Embedding provider configuration
      - EMBEDDING_PROVIDER=${EMBEDDING_PROVIDER:-local}
      - EMBEDDING_MODEL_OPENAI=${EMBEDDING_MODEL_OPENAI:-text-embedding-3-small}
      - EMBEDDING_MODEL_LOCAL=${EMBEDDING_MODEL_LOCAL:-bge-code-v1}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ${REPO_PATH}:/work/repo
      # Mount logs directory for the service to write logs
      - ./logs/rag-api:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_healthy
    #   start_period: 5s
    profiles:
      - dev
      - prod

  # Lock API service (internal only - Golang development)
  lock-api:
    build:
      context: .
      target: lock-api
    networks:
      - cage-internal
      - cage-external
    labels:
      - "traefik.enable=true"
      # HTTP routing
      - "traefik.http.routers.lock-api.rule=Host(`lock.localhost`)"
      - "traefik.http.routers.lock-api.entrypoints=web"
      - "traefik.http.services.lock-api.loadbalancer.server.port=8000"
      # HTTPS routing with Let's Encrypt
      - "traefik.http.routers.lock-api-secure.rule=Host(`lock.localhost`)"
      - "traefik.http.routers.lock-api-secure.entrypoints=websecure"
      - "traefik.http.routers.lock-api-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.lock-api-secure.service=lock-api"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - REPO_PATH=/work/repo
      - RELOAD=${RELOAD:-false}
      - GOPATH=/go
      - GOROOT=/usr/local/go
    volumes:
      - ./src:/app/src
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ${REPO_PATH}:/work/repo
      - go_cache:/go
      # Mount logs directory for the service to write logs
      - ./logs/lock-api:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    #   start_period: 5s
    profiles:
      - dev
      - prod

  # MCP Server (ONLY external-facing service)
  mcp:
    build:
      context: .
      target: mcp
    networks:
      - cage-internal
      - cage-external
    labels:
      - "traefik.enable=true"
      # HTTP routing
      - "traefik.http.routers.mcp.rule=Host(`mcp.localhost`)"
      - "traefik.http.routers.mcp.entrypoints=web"
      - "traefik.http.routers.mcp.service=mcp"
      - "traefik.http.services.mcp.loadbalancer.server.port=8765"
      # HTTPS routing with Let's Encrypt
      - "traefik.http.routers.mcp-secure.rule=Host(`mcp.localhost`)"
      - "traefik.http.routers.mcp-secure.entrypoints=websecure"
      - "traefik.http.routers.mcp-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.mcp-secure.service=mcp"
      # Debugpy port routing
      - "traefik.http.routers.mcp-debug.rule=Host(`mcp-debug.localhost`)"
      - "traefik.http.routers.mcp-debug.entrypoints=web"
      - "traefik.http.routers.mcp-debug.service=mcp-debug"
      - "traefik.http.services.mcp-debug.loadbalancer.server.port=5679"
    environment:
      - POD_TOKEN=${POD_TOKEN:-test-mcp-token}
      - API_BASE_URL=http://crew-api:8000
      - FILES_API_BASE_URL=http://files-api:8000
      - GIT_API_BASE_URL=http://git-api:8000
      - RAG_API_BASE_URL=http://rag-api:8000
      - API_TIMEOUT_S=30
      - DEBUGPY_ENABLED=${DEBUGPY_ENABLED:-0}
      - DEBUGPY_WAIT_FOR_CLIENT=${DEBUGPY_WAIT_FOR_CLIENT:-0}
    volumes:
      # Mount only necessary directories, not .venv or build artifacts
      - ./src:/app/src
      - ./scripts:/app/scripts
      # Mount logs directory for the service to write logs
      - ./logs/mcp:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      crew-api:
        condition: service_healthy
      files-api:
        condition: service_healthy
      git-api:
        condition: service_healthy
      rag-api:
        condition: service_healthy
    #   start_period: 15s
    profiles:
      - dev
      - prod

  # Crew API service (internal only)
  crew-api:
    build:
      context: .
      target: crew-api
    networks:
      - cage-internal
      - cage-external
    labels:
      - "traefik.enable=true"
      # HTTP routing
      - "traefik.http.routers.crew-api.rule=Host(`crew.localhost`)"
      - "traefik.http.routers.crew-api.entrypoints=web"
      - "traefik.http.services.crew-api.loadbalancer.server.port=8000"
      # HTTPS routing with Let's Encrypt
      - "traefik.http.routers.crew-api-secure.rule=Host(`crew.localhost`)"
      - "traefik.http.routers.crew-api-secure.entrypoints=websecure"
      - "traefik.http.routers.crew-api-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.crew-api-secure.service=crew-api"
    environment:
      - POD_TOKEN=${POD_TOKEN}
      - REPO_PATH=/work/repo
      - RELOAD=${RELOAD:-false}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      # Do not mount pyproject.toml or uv.lock - they're in the image
      - ${REPO_PATH}:/work/repo
      # Mount logs directory for the service to write logs
      - ./logs/crew-api:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - dev
      - prod

  # Task JSON Static Server (internal only - Grafana datasource)
  task-json-static:
    image: nginx:1.27-alpine
    networks:
      - cage-internal
    volumes:
      - ./.cage/tasks:/usr/share/nginx/html:ro
      - ./nginx/tasks.conf:/etc/nginx/conf.d/default.conf:ro
      # (optional) enable Basic Auth by mounting the htpasswd file:
      # - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/health.json"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles:
      - observability

  # Logging Stack - Loki (Log Aggregation)
  loki:
    image: grafana/loki:2.9.6
    command: ["-config.file=/etc/loki/config.yml"]
    networks:
      - cage-internal
    volumes:
      - ./logging-stack/loki/config.yml:/etc/loki/config.yml:ro
      - loki-data:/loki
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3100/ready"]
      interval: 15s
      timeout: 3s
      retries: 20
    restart: unless-stopped
    profiles: [observability]

  # Logging Stack - Promtail (Log Collection)
  promtail:
    image: grafana/promtail:2.9.6
    networks:
      - cage-internal
    volumes:
      - ./logging-stack/promtail/config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/cage:ro
      - promtail-positions:/tmp
    command: ["-config.file=/etc/promtail/config.yml"]
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    profiles: [observability]

  # Logging Stack - Grafana (Log Visualization - exposed for dev)
  grafana:
    image: grafana/grafana:11.1.3
    networks:
      - cage-internal
      - cage-external
    labels:
      - "traefik.enable=true"
      # HTTP routing
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      # HTTPS routing with Let's Encrypt
      - "traefik.http.routers.grafana-secure.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana-secure.entrypoints=websecure"
      - "traefik.http.routers.grafana-secure.tls.certresolver=letsencrypt"
      - "traefik.http.routers.grafana-secure.service=grafana"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=yesoreyeram-infinity-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./logging-stack/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    profiles: [observability]

  # Logging Stack - Logrotate (Log Rotation)
  logrotate:
    build:
      context: ./logging-stack/logrotate
      dockerfile: Dockerfile
    networks:
      - cage-internal
    volumes:
      - ./logs:/var/log/cage
      - logrotate-status:/var/lib/logrotate
    restart: unless-stopped
    profiles: [observability]

volumes:
  postgres_data:
  redis_data:
  go_cache:
  # Ollama volumes
  ollama_models:
  # Logging stack volumes
  loki-data:
  promtail-positions:
  grafana-data:
  logrotate-status:
  # Traefik volumes
  traefik-letsencrypt:
