[project]
name = "cage"
version = "0.1.0"
description = "Pod-based Multi-Agent Repository Service"
authors = [
    {name = "Cage Team", email = "team@cage.dev"}
]
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    # Core API dependencies
    "fastapi>=0.111",
    "uvicorn[standard]>=0.30",
    "pydantic>=2.8.0",
    "python-multipart==0.0.6",

    # CLI dependencies
    "typer==0.9.0",
    "rich==13.7.0",

    # Database and caching
    "asyncpg>=0.30.0",
    "redis==5.0.1",
    "psycopg2-binary==2.9.9",

    # RAG and embeddings
    "openai>=1.12.0",
    "langchain>=0.1.4",
    "pgvector==0.2.4",
    "mcp==1.0.0",

    # CrewAI integration
    "crewai>=0.28.0",

    # Utilities
    "pyyaml==6.0.1",
    "httpx>=0.27",
    "jsonschema>=4.22.0",
]

[project.optional-dependencies]
dev = [
    "pytest==7.4.3",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "pytest-xdist==3.5.0",
    "debugpy==1.8.0",
    "psutil==5.9.8",
    # Code quality and formatting
    "ruff==0.1.6",
    "mypy==1.7.1",
    "pre-commit==3.6.0",
    "black==23.12.1",
    "isort==5.13.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
addopts = [
    "--strict-markers",
    "--disable-warnings",
    "--tb=short",
    "-ra",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=0",
]
markers = [
    "unit: Unit tests - fast, isolated tests that don't require external dependencies",
    "integration: Integration tests - tests that require external services or databases",
    "api: API tests - tests that make HTTP requests to API endpoints",
    "cli: CLI tests - tests for command-line interface functionality",
    "slow: Slow running tests - tests that take more than 5 seconds to run",
    "performance: Performance tests - tests that measure performance metrics",
    "smoke: Smoke tests - basic functionality tests for quick validation",
    "e2e: End-to-end tests - full workflow tests from start to finish",
    "docker: Docker tests - tests that require Docker containers",
    "database: Database tests - tests that require database connections",
    "network: Network tests - tests that require network connectivity",
    "external: External tests - tests that require external services",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "langchain.*",
    "openai.*",
    "mcp.*",
]
ignore_missing_imports = true

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
