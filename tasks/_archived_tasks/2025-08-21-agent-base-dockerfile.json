{
  "id": "2025-08-21-agent-base-dockerfile",
  "title": "Agent Base Dockerfile (Fly-ready Ubuntu base for Agent Pods)",
  "owner": "Jaak",
  "status": "archived",
  "created_at": "2025-08-21 16:00",
  "updated_at": "2025-08-21 19:30",
  "progress_percent": 92,
  "tags": [
    "cursor",
    "task",
    "docker",
    "fly.io",
    "agent"
  ],
  "summary": "Create a minimal, secure Ubuntu-based container image that ships with Python and the Gemini SDK configured for API access, includes the official Gemini CLI, accepts a runtime setup script for repo-specific tools, starts a lightweight daemon to manage agent pod lifecycle, and deploys cleanly on Fly.io with non-root user, health checks, and simple config.",
  "success_criteria": [
    {
      "text": "Image builds locally and runs non-root under tini (PID 1)",
      "checked": true
    },
    {
      "text": "If /app/pod-setup.sh exists, it runs on startup; otherwise start is not blocked",
      "checked": true
    },
    {
      "text": "agent_daemon.py starts and logs a heartbeat every 10s",
      "checked": true
    },
    {
      "text": "Presence/absence of GEMINI_API_KEY is handled: warn if missing, do not crash",
      "checked": true
    },
    {
      "text": "fly deploy works with provided fly.toml; health checks pass",
      "checked": false
    },
    {
      "text": "Container size remains lean (base â‰¤ ~400â€“500MB uncompressed; no heavy extras by default)",
      "checked": true
    }
  ],
  "acceptance_checks": [
    {
      "text": "Dockerfile builds successfully with Podman/Docker",
      "checked": true
    },
    {
      "text": "Container runs as non-root user with tini as PID 1",
      "checked": true
    },
    {
      "text": "Gemini CLI is available on PATH and responds to --version",
      "checked": true
    },
    {
      "text": "Optional pod-setup.sh execution works correctly",
      "checked": true
    },
    {
      "text": "Daemon starts and produces heartbeat logs",
      "checked": true
    },
    {
      "text": "Fly.io deployment succeeds with health checks passing",
      "checked": false
    },
    {
      "text": "Base image size is within target range",
      "checked": true
    }
  ],
  "subtasks": [
    "âœ… Base image & user setup (Ubuntu 24.04, Python, tini, non-root user)",
    "âœ… LLM SDKs & dependencies (Python + Gemini CLI, Node.js â‰¥18)",
    "âœ… Runtime bootstrap (pod-entrypoint.sh, pod-setup.sh handling)",
    "âœ… Daemon implementation (agent_daemon.py with asyncio, heartbeat)",
    "ðŸ”„ Fly.io configuration (fly.toml, health checks, deployment)",
    "ðŸ”„ Validation & testing (local build, Fly deployment)"
  ],
  "todo": [
    {
      "text": "Create Dockerfile with Ubuntu 24.04 base",
      "checked": true
    },
    {
      "text": "Install Python, pip, tini, curl, git, build-essential",
      "checked": true
    },
    {
      "text": "Create non-root user and ensure /app is writable",
      "checked": true
    },
    {
      "text": "Add requirements.txt with minimal Python dependencies",
      "checked": true
    },
    {
      "text": "Install Node.js â‰¥18 and Gemini CLI globally",
      "checked": true
    },
    {
      "text": "Write pod-entrypoint.sh for runtime setup handling",
      "checked": true
    },
    {
      "text": "Create example pod-setup.sh for repo-specific tooling",
      "checked": true
    },
    {
      "text": "Implement agent_daemon.py with Gemini init and heartbeat",
      "checked": true
    },
    {
      "text": "Add fly.toml template with TCP health checks",
      "checked": true
    },
    {
      "text": "Test local build with Podman/Docker",
      "checked": true
    },
    {
      "text": "Deploy to Fly.io and validate health checks",
      "checked": false
    },
    {
      "text": "Document deployment workflow and environment variables",
      "checked": true
    }
  ],
  "changelog": [
    {
      "timestamp": "2025-08-21 19:45",
      "text": "Created local network testing setup with docker-compose, router configuration, and test client scripts for validating inter-container communication before Fly.io deployment"
    },
    {
      "timestamp": "2025-08-21 19:30",
      "text": "Container successfully built and tested locally. All core functionality working including Gemini CLI, daemon heartbeat, and proper error handling for missing API key."
    },
    {
      "timestamp": "2025-08-21 16:00",
      "text": "Task file created with comprehensive requirements and implementation plan"
    }
  ],
  "decisions": [
    "**Python vs Go for daemon**: Starting with Python for rapid delivery and richer LLM ecosystem; can revisit Go if performance bottlenecks appear",
    "**Base image approach**: Keep base minimal and push extras to pod-setup.sh to avoid bloat creep",
    "**Health checks**: Start with TCP checks for simplicity, can add HTTP /health endpoint later if needed",
    "**Ubuntu 24.04 Python handling**: Used virtual environment approach to handle externally managed Python environment restrictions"
  ],
  "lessons_learned": [
    "Initial task planning shows clear separation of concerns between base image and runtime customization",
    "Fly.io architecture requires careful consideration of process management and health monitoring",
    "Ubuntu 24.04 requires virtual environments for pip installations due to PEP 668 restrictions",
    "Virtual environment approach provides clean isolation and avoids system package conflicts",
    "**Container testing strategy**: Use background execution with `&` and then check logs/stop containers to avoid hanging terminal sessions",
    "**Long-running task handling**: When testing containers that run indefinitely, use `podman run --name container-name &` then `podman logs container-name` and `podman stop container-name` for clean testing workflow",
    "**Local-first approach**: Test all functionality locally before Fly.io deployment to catch issues early and validate the complete workflow"
  ],
  "issues_risks": [
    "**Bloat creep**: Mitigation - Keep base minimal, push extras to pod-setup.sh âœ…",
    "**Signal handling**: Mitigation - Use tini as PID 1, avoid bash as long-runner âœ…",
    "**Credential leakage**: Mitigation - Use fly secrets for GEMINI_API_KEY, never bake keys into image âœ…",
    "**Health checks failing**: Mitigation - Start with TCP check, add HTTP /health later if needed",
    "**Ubuntu 24.04 Python restrictions**: Mitigation - Use virtual environment for pip installations âœ…"
  ],
  "next_steps": [],
  "references": [
    "[Fly.io Per-User Dev Environments Blueprint](https://fly.io/docs/blueprints/per-user-dev-environments/)",
    "[Fly.io Machines Documentation](https://fly.io/docs/machines/)",
    "[Google Generative AI Python SDK](https://ai.google.dev/docs/python_quickstart)",
    "[Gemini CLI Documentation](https://ai.google.dev/docs/gemini_cli)"
  ],
  "migration": {
    "migrated": true,
    "source_path": "2025-08-21-agent-base-dockerfile.md",
    "method": "script",
    "migrated_at": "2025-08-23 18:31"
  },
  "metadata": {}
}
